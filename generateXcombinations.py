########################################################
# Skyler Kuhn
# Generate Combinations for ICD codes
# Biodemography Project
########################################################
from __future__ import print_function
import sys


def combinations(limit):
    """To generate combinations, a queue is implemented. The element indexed in the first position of the queue is
    indexed. This element is used for generating permutations. Combinations or item-sets are generated by joining
    element with the range of numbers that follow it. These generated item-sets are then pushed back onto the queue.
    After the each item-sets for a given element has been generated, the element that was indexed by the queue is then
    popped off the queue."""

    queue = [[num] for num in range(1, 36)]  # Thirty-six for the 35 icd codes (always #icdcodes+1)
    numofcodes = len(queue) + 1
    count = 0

    while len(queue) > 0 and count < limit:
        count += 1
        element = queue[0]
        yield element

        for num in range(element[-1] + 1, numofcodes):
            itemset = list(element) + [num]
            queue.append(itemset)
        queue.pop(0)


def handleArguments():
    try:
        limitarg = int(sys.argv[1])
    except ValueError:
        printErrorMessage()
        limitarg = 1000  # default limit

    return limitarg


def printErrorMessage():
    """If no arguments are provided, this message will be displayed to the user. By default if the argument which acts
    to limit the number of generated combinations is not provided,  """

    print("\n-------------------------------------------------------------------------\n" +
          "USAGE ERROR: Number of Combinations to Generate has Defaulted to 10**3\n" +
          "-------------------------------------------------------------------------\n" +
          "Try:\n\tpython generateCombinations.py numberofGeneratedCombinations\n\n" +
          "Example:\n\tpython generateCombinations.py 5\n" +
          "\tOutput File:\n\t1\n\t2\n\t3\n\t4\n\t1,2\n" +
          "-------------------------------------------------------------------------\n\nGenerating Combinations:")


def printOutfileFormattingHelp():
    print("\n\n" +
          "Format of combinationsOutputFile.txt:\n" +
          "-----------------------------------------------------------\n" +
          "countofGeneratedCombination[\\tab]generatedCombination\n" +
          "Example:\n1\t1\n2\t2\n3\t3\n.\n.\n.\n35\t35\n36\t1,2\n37\t1,3\n" +
          "-----------------------------------------------------------")


def main():
    try:
        limit = handleArguments()  # the number of combinations to generate
    except IndexError:
        printErrorMessage()  # Will print off message saying not arguments were provided
        limit = 1000  # if no number is given to the program, the default limit is 10**3

    fH = open("combinationsOutputFile.txt", "w")
    combscounter = 0
    for generated_itemset in combinations(limit):
        combscounter += 1
        print(combscounter,generated_itemset)
        fH.write("{}\t{}\n".format(combscounter, str(generated_itemset).replace(" ","")[1:-1]))

    printOutfileFormattingHelp()

if __name__ == '__main__':
    main()

